import { buildLexer } from 'typescript-parsec';

export enum TokenKind {
	LITERAL_STRING,
	LITEARL_INTEGER,
	LITEARL_FLOAT,

	KEYWORD_ABSTRACT,
	KEYWORD_AND,
	KEYWORD_AS,
	KEYWORD_ASYNC,
	KEYWORD_AWAIT,
	KEYWORD_BREAK,
	KEYWORD_CATCH,
	KEYWORD_CLASS,
	KEYWORD_CONST,
	KEYWORD_CONTINUE,
	KEYWORD_DEF,
	KEYWORD_DEL,
	KEYWORD_DELETE,
	KEYWORD_ELSE,
	KEYWORD_EXIT,
	KEYWORD_FALSE,
	KEYWORD_FIELD,
	KEYWORD_FINAL,
	KEYWORD_FINALLY,
	KEYWORD_FOR,
	KEYWORD_FUNCTION,
	KEYWORD_IF,
	KEYWORD_IMPORT,
	KEYWORD_INTERFACE,
	KEYWORD_IN,
	KEYWORD_IS,
	KEYWORD_ISNOT,
	KEYWORD_METHOD,
	KEYWORD_MODULE,
	KEYWORD_NEW,
	KEYWORD_NOTIN,
	KEYWORD_NULL,
	KEYWORD_OR,
	KEYWORD_PACKAGE,
	KEYWORD_PRIVATE,
	KEYWORD_PROTECTED,
	KEYWORD_RAISE,
	KEYWORD_READONLY,
	KEYWORD_RETURN,
	KEYWORD_STATIC,
	KEYWORD_THEN,
	KEYWORD_TRUE,
	KEYWORD_TRY,
	KEYWORD_WHILE,

	SYMBOL_LPAREN,
	SYMBOL_RPAREN,
	SYMBOL_LBRACE,
	SYMBOL_RBRACE,
	SYMBOL_LBRACKET,
	SYMBOL_RBRACKET,
	SYMBOL_RARROW,
	SYMBOL_LARROW,
	SYMBOL_INCREMENT,
	SYMBOL_DECREMENT,
	SYMBOL_LTHANEQ,
	SYMBOL_GTHANEQ,
	SYMBOL_EQUIV,
	SYMBOL_NEQUIV,
	SYMBOL_PLUS,
	SYMBOL_MINUS,
	SYMBOL_STAR,
	SYMBOL_FSLASH,
	SYMBOL_BSLASH,
	SYMBOL_PERCENT,
	SYMBOL_AMPER,
	SYMBOL_PIPE,
	SYMBOL_CARET,
	SYMBOL_TILDE,
	SYMBOL_EXCLAIM,
	SYMBOL_QUESTION,
	SYMBOL_AT,
	SYMBOL_POUND,
	SYMBOL_LTHAN,
	SYMBOL_GTHAN,
	SYMBOL_EQUALS,
	SYMBOL_COMMA,
	SYMBOL_COLON,
	SYMBOL_PERIOD,

	IDENTIFIER,
	NEWLINE,
	COMMENT_LINE,
	COMMENT_BLOCK,
	SPACE
}

export const zinniaTokenizer = buildLexer([
	[true, /^'(\\'|[^'])*'/g, TokenKind.LITERAL_STRING],
	[true, /^-?\d+/g, TokenKind.LITEARL_INTEGER],
	[true, /^-?\d+(\.\d+)?/g, TokenKind.LITEARL_FLOAT],

	[true, /^(\r?\n)+/g, TokenKind.NEWLINE],

	[true, /^abstract/g, TokenKind.KEYWORD_ABSTRACT],
	[true, /^and/g, TokenKind.KEYWORD_AND],
	[true, /^as/g, TokenKind.KEYWORD_AS],
	[true, /^async/g, TokenKind.KEYWORD_ASYNC],
	[true, /^await/g, TokenKind.KEYWORD_AWAIT],
	[true, /^break/g, TokenKind.KEYWORD_BREAK],
	[true, /^catch/g, TokenKind.KEYWORD_CATCH],
	[true, /^class/g, TokenKind.KEYWORD_CLASS],
	[true, /^const/g, TokenKind.KEYWORD_CONST],
	[true, /^continue/g, TokenKind.KEYWORD_CONTINUE],
	[true, /^def/g, TokenKind.KEYWORD_DEF],
	[true, /^del/g, TokenKind.KEYWORD_DEL],
	[true, /^delete/g, TokenKind.KEYWORD_DELETE],
	[true, /^else/g, TokenKind.KEYWORD_ELSE],
	[true, /^exit/g, TokenKind.KEYWORD_EXIT],
	[true, /^False/g, TokenKind.KEYWORD_FALSE],
	[true, /^field/g, TokenKind.KEYWORD_FIELD],
	[true, /^final/g, TokenKind.KEYWORD_FINAL],
	[true, /^finally/g, TokenKind.KEYWORD_FINALLY],
	[true, /^for/g, TokenKind.KEYWORD_FOR],
	[true, /^function/g, TokenKind.KEYWORD_FUNCTION],
	[true, /^if/g, TokenKind.KEYWORD_IF],
	[true, /^import/g, TokenKind.KEYWORD_IMPORT],
	[true, /^interface/g, TokenKind.KEYWORD_INTERFACE],
	[true, /^in/g, TokenKind.KEYWORD_IN],
	[true, /^is/g, TokenKind.KEYWORD_IS],
	[true, /^isnot/g, TokenKind.KEYWORD_ISNOT],
	[true, /^method/g, TokenKind.KEYWORD_METHOD],
	[true, /^module/g, TokenKind.KEYWORD_MODULE],
	[true, /^new/g, TokenKind.KEYWORD_NEW],
	[true, /^notin/g, TokenKind.KEYWORD_NOTIN],
	[true, /^null/g, TokenKind.KEYWORD_NULL],
	[true, /^or/g, TokenKind.KEYWORD_OR],
	[true, /^package/g, TokenKind.KEYWORD_PACKAGE],
	[true, /^private/g, TokenKind.KEYWORD_PRIVATE],
	[true, /^protected/g, TokenKind.KEYWORD_PROTECTED],
	[true, /^raise/g, TokenKind.KEYWORD_RAISE],
	[true, /^readonly/g, TokenKind.KEYWORD_READONLY],
	[true, /^return/g, TokenKind.KEYWORD_RETURN],
	[true, /^static/g, TokenKind.KEYWORD_STATIC],
	[true, /^then/g, TokenKind.KEYWORD_THEN],
	[true, /^True/g, TokenKind.KEYWORD_TRUE],
	[true, /^try/g, TokenKind.KEYWORD_TRY],
	[true, /^while/g, TokenKind.KEYWORD_WHILE],

	[true, /^\(/g, TokenKind.SYMBOL_LPAREN],
	[true, /^\)/g, TokenKind.SYMBOL_RPAREN],
	[true, /^\{/g, TokenKind.SYMBOL_LBRACE],
	[true, /^\}/g, TokenKind.SYMBOL_RBRACE],
	[true, /^\[/g, TokenKind.SYMBOL_LBRACKET],
	[true, /^\]/g, TokenKind.SYMBOL_RBRACKET],
	[true, /^->/g, TokenKind.SYMBOL_RARROW],
	[true, /^<-/g, TokenKind.SYMBOL_LARROW],
	[true, /^\+\+/g, TokenKind.SYMBOL_INCREMENT],
	[true, /^--/g, TokenKind.SYMBOL_DECREMENT],
	[true, /^<=/g, TokenKind.SYMBOL_LTHANEQ],
	[true, /^>=/g, TokenKind.SYMBOL_GTHANEQ],
	[true, /^==/g, TokenKind.SYMBOL_EQUIV],
	[true, /^!=/g, TokenKind.SYMBOL_NEQUIV],
	[true, /^\+/g, TokenKind.SYMBOL_PLUS],
	[true, /^-/g, TokenKind.SYMBOL_MINUS],
	[true, /^\*/g, TokenKind.SYMBOL_STAR],
	[true, /^\//g, TokenKind.SYMBOL_FSLASH],
	[true, /^\\/g, TokenKind.SYMBOL_BSLASH],
	[true, /^%/g, TokenKind.SYMBOL_PERCENT],
	[true, /^&/g, TokenKind.SYMBOL_AMPER],
	[true, /^\|/g, TokenKind.SYMBOL_PIPE],
	[true, /^\^/g, TokenKind.SYMBOL_CARET],
	[true, /^~/g, TokenKind.SYMBOL_TILDE],
	[true, /^!/g, TokenKind.SYMBOL_EXCLAIM],
	[true, /^\?/g, TokenKind.SYMBOL_QUESTION],
	[true, /^@/g, TokenKind.SYMBOL_AT],
	[true, /^#/g, TokenKind.SYMBOL_POUND],
	[true, /^</g, TokenKind.SYMBOL_LTHAN],
	[true, /^>/g, TokenKind.SYMBOL_GTHAN],
	[true, /^=/g, TokenKind.SYMBOL_EQUALS],
	[true, /^,/g, TokenKind.SYMBOL_COMMA],
	[true, /^:/g, TokenKind.SYMBOL_COLON],
	[true, /^\./g, TokenKind.SYMBOL_PERIOD],


	[true, /^[a-zA-Z_][a-zA-Z0-9_]*/g, TokenKind.IDENTIFIER],
	[false, /^;[^\n]*\n/g, TokenKind.COMMENT_LINE],
	[false, /^[/]\*([^*]|\*+[^/])*\*+[/]/g, TokenKind.COMMENT_BLOCK],
	[false, /^(?:(?!\n)\s)+/g, TokenKind.SPACE]
]);